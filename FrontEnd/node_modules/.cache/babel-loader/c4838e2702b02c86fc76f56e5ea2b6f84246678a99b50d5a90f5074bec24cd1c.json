{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport NavBar from './NavBar.vue';\nimport { mapGetters } from 'vuex';\nimport axios from 'axios';\nimport router from '../router';\n//import DatePicker from './DatePicker.vue';\n\nexport default {\n  name: 'FormCreate',\n  components: {\n    NavBar\n    //DatePicker\n  },\n  data() {\n    return {\n      selectedFields: [{\n        id: 'field1',\n        label: '',\n        type: 'text'\n      }],\n      showForm: false,\n      formTitle: '',\n      only: 0,\n      // 默认不选中 \n      roleList: [0, 0, 0],\n      ddl: \"\",\n      //2024-06-11\n      date: new Date(),\n      errorMessage: ''\n    };\n  },\n  computed: {\n    // 计算属性返回label数组  \n    labelArray() {\n      return this.selectedFields.map(field => field.label);\n    },\n    // 计算属性返回type数组  \n    typeArray() {\n      return this.selectedFields.map(field => field.type);\n    },\n    ...mapGetters(['username'])\n  },\n  methods: {\n    formattedDate() {\n      const year = this.date.getFullYear();\n      const month = String(this.date.getMonth() + 1).padStart(2, '0'); // 月份是从 0 开始的，所以需要 +1，并使用 padStart 填充 0  \n      const day = String(this.date.getDate()).padStart(2, '0'); // 使用 padStart 填充 0  \n      return `${year}-${month}-${day}`;\n    },\n    picked() {\n      this.ddl = this.formattedDate();\n      console.log(this.ddl);\n    },\n    addField() {\n      const id = `field${this.selectedFields.length + 1}`;\n      this.selectedFields.push({\n        id,\n        label: '',\n        type: 'text'\n      });\n    },\n    removeField(index) {\n      this.selectedFields.splice(index, 1);\n    },\n    generateForm() {\n      this.showForm = true;\n      // 生成表单数据对象，用于绑定表单输入\n      this.formData = this.selectedFields.reduce((acc, field) => {\n        acc[field.id] = '';\n        return acc;\n      });\n    },\n    submitForm() {\n      if (!this.formTitle) {\n        this.errorMessage = '请填写表单标题';\n        alert(this.errorMessage);\n        return;\n      }\n      for (var i = 1; i <= this.field.length; i++) {\n        field[i];\n      }\n      const {\n        username\n      } = this;\n      console.log(this.only);\n      console.log(this.ddl);\n      axios.post('http://localhost:8080/createform', {\n        title: this.formTitle,\n        Publisher: username,\n        Item: this.labelArray,\n        ItemType: this.typeArray,\n        only: this.only,\n        roleList: this.roleList,\n        ddl: this.ddl\n      }).then(response => {\n        //console.log('后端返回数据：', response.data); \n        if (response.data.success) {\n          this.selectedFields = [{\n            id: 'field1',\n            label: '字段1',\n            type: 'text'\n          }], this.showForm = false, this.formTitle = '', this.only = 0, this.roleList = [0, 0, 0], this.ddl = \"\", router.push('/form-create');\n          alert('表单创建成功！');\n        } else {\n          //console.log(response.data.message);\n          this.errorMessage = response.data.message || '表单创建失败了，请稍后再试';\n          alert(this.errorMessage);\n        }\n      }).catch(error => {\n        if (error.response) {\n          // 后端返回的错误信息\n          //console.log(error.response.data);\n          this.errorMessage = error.response.data;\n        } else {\n          this.errorMessage = '表单创建失败，请稍后再试';\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["NavBar","mapGetters","axios","router","name","components","data","selectedFields","id","label","type","showForm","formTitle","only","roleList","ddl","date","Date","errorMessage","computed","labelArray","map","field","typeArray","methods","formattedDate","year","getFullYear","month","String","getMonth","padStart","day","getDate","picked","console","log","addField","length","push","removeField","index","splice","generateForm","formData","reduce","acc","submitForm","alert","i","username","post","title","Publisher","Item","ItemType","then","response","success","message","catch","error"],"sources":["/Users/aoliliaoao/Downloads/WisForm/FrontEnd/src/components/FormCreate.vue"],"sourcesContent":["<template>\r\n  <div class=\"form-create\">\r\n  <div> \r\n    <NavBar/> \r\n  </div>\r\n\r\n  <div class=\"welcome\">  \r\n      <img src='@/assets/welcome.png' style=\"width: 500px; height: 80px;\"  />  \r\n  </div>\r\n\r\n  <div class=\"text\">\r\n    <p style=\"color: black;\">请填写创建表单需要的信息</p>\r\n  </div>\r\n\r\n  <div class=\"dynamic-form\">  \r\n    <div class=\"form-title-input\">    \r\n        <label for=\"formTitle\">表单标题：</label>    \r\n        <div style=\"margin: 5px 0\" />\r\n        <el-input\r\n        v-model=\"formTitle\"\r\n        style=\"width: 400px\"\r\n        autosize\r\n        type=\"textarea\"\r\n        placeholder=\"请输入表单标题\"\r\n        @focus=\"keyJudge(item[index],content[index],index)\"\r\n        @blur=\"judge(item[index],content[index],index)\"\r\n        />  \r\n    </div>\r\n\r\n    <div class=\"demo-date-picker\">\r\n    <div class=\"block\">\r\n      <span class=\"demonstration\">截止日期：</span>\r\n      <el-date-picker\r\n        v-model=\"date\"\r\n        type=\"date\"\r\n        placeholder=\"请选择截止日期\"\r\n        :size=\"size\"\r\n        @change=\"picked\"\r\n      />\r\n    </div>\r\n  </div>\r\n\r\n    <div>  \r\n      <div style=\"margin: 5px 0\" />\r\n    <label for=\"myCheckbox\">  \r\n      <input type=\"checkbox\" id=\"myCheckbox\" v-model=\"only\" />  \r\n      填表人只能填写自己的信息  \r\n    </label>  \r\n  </div> \r\n\r\n  <div style=\"margin: 8px 0\" />\r\n  <span class=\"demonstration\">可以填写该表单的用户类型</span>\r\n  <div style=\"margin: 5px 0\" />\r\n  <div>  \r\n    <label for=\"myCheckbox\">  \r\n      <input type=\"checkbox\" id=\"myCheckbox\" v-model=\"roleList[0]\" />  \r\n      院长  \r\n    </label> \r\n    <label for=\"myCheckbox\">  \r\n      <input type=\"checkbox\" id=\"myCheckbox\" v-model=\"roleList[1]\" />  \r\n      系主任 \r\n    </label>  \r\n    <label for=\"myCheckbox\">  \r\n      <input type=\"checkbox\" id=\"myCheckbox\" v-model=\"roleList[2]\" />  \r\n      老师 \r\n    </label> \r\n  </div> \r\n\r\n  <div style=\"margin: 10px 0\" />\r\n  \r\n    <!-- 循环渲染已选择的表单项 --> \r\n    <p class=\"demonstration\">创建表单项</p> \r\n    <div v-for=\"(field, index) in selectedFields\" :key=\"index\" class=\"form-item\">\r\n      <el-input\r\n        v-model=\"field.label\"\r\n        style=\"width: 400px\"\r\n        autosize\r\n        type=\"textarea\"\r\n        placeholder=\"请输入表单项名称\"\r\n        /> \r\n        <button @click=\"removeField(index)\" class=\"remove-btn\">-</button> <!-- 移除表单项的按钮 --> \r\n    </div>  \r\n  \r\n    <!-- 添加表单项的按钮 -->  \r\n    <button @click=\"addField\" class=\"add-btn\">添加表单项</button>  \r\n  \r\n    <!-- 确认按钮，用于生成表单 -->  \r\n    <button @click=\"generateForm\" class=\"generate-btn\">确认</button>  \r\n  \r\n    <!-- 根据showForm的值条件渲染表单 -->  \r\n    <form v-if=\"showForm\" @submit.prevent=\"submitForm\" class=\"form-table\">    \r\n        <table>    \r\n            <!-- 循环渲染已选择的表单项为表格形式 -->  \r\n            <tr v-for=\"(field, index) in selectedFields\" :key=\"index\">    \r\n                <td>    \r\n                    <label :for=\"field.id\" class=\"field-label\">{{ field.label }}</label>  <!-- 表单项标签 -->  \r\n                </td>    \r\n                <td>    \r\n                  <p >  </p>\r\n                </td>    \r\n            </tr>    \r\n        </table>    \r\n        <button type=\"submit\" class=\"submit-btn\">提交</button>  <!-- 提交表单的按钮 -->  \r\n    </form>  \r\n  </div>\r\n</div>\r\n</template>\r\n\r\n  <script>\r\n  import NavBar from './NavBar.vue'; \r\n  import { mapGetters } from 'vuex';\r\n  import axios from 'axios';\r\n  import router from '../router';\r\n  //import DatePicker from './DatePicker.vue';\r\n  \r\n  export default {\r\n    name: 'FormCreate',\r\n    components: {  \r\n      NavBar\r\n      //DatePicker\r\n    } ,\r\n    data() {\r\n      return {\r\n        selectedFields: [{ id: 'field1', label: '',type:'text' }],\r\n        showForm: false,\r\n        formTitle:'',\r\n        only: 0 ,// 默认不选中 \r\n        roleList:[0,0,0],\r\n        ddl:\"\",//2024-06-11\r\n        date:new Date(),\r\n        errorMessage:''\r\n      };\r\n    }, \r\n    computed: {  \r\n      // 计算属性返回label数组  \r\n      labelArray() {  \r\n        return this.selectedFields.map(field => field.label);  \r\n      },  \r\n      // 计算属性返回type数组  \r\n      typeArray() {  \r\n        return this.selectedFields.map(field => field.type);  \r\n      },\r\n      ...mapGetters([  \r\n        'username'  \r\n      ]) ,    \r\n    },\r\n    methods: {\r\n      formattedDate() {  \r\n      const year = this.date.getFullYear();  \r\n      const month = String(this.date.getMonth() + 1).padStart(2, '0'); // 月份是从 0 开始的，所以需要 +1，并使用 padStart 填充 0  \r\n      const day = String(this.date.getDate()).padStart(2, '0'); // 使用 padStart 填充 0  \r\n      return `${year}-${month}-${day}`;  \r\n    }, \r\n      picked() {\r\n\t\t\t\tthis.ddl=this.formattedDate();\r\n        console.log(this.ddl);\r\n\t\t\t},\r\n      addField() {\r\n        const id = `field${this.selectedFields.length + 1}`;\r\n        this.selectedFields.push({ id, label: '' ,type:'text'});\r\n      },\r\n      removeField(index) {\r\n        this.selectedFields.splice(index, 1);\r\n      },\r\n      generateForm() {\r\n        this.showForm = true;\r\n        // 生成表单数据对象，用于绑定表单输入\r\n        this.formData = this.selectedFields.reduce((acc, field) => {\r\n          acc[field.id] = '';\r\n          return acc;\r\n        });\r\n      },\r\n      submitForm() {\r\n        if (!this.formTitle){\r\n          this.errorMessage = '请填写表单标题'; \r\n          alert(this.errorMessage); \r\n          return;  \r\n        } \r\n        for (var i = 1; i <= this.field.length; i++) {  \r\n        field[i]  \r\n    }\r\n        const { username } = this; \r\n        console.log(this.only);\r\n        console.log(this.ddl);\r\n        axios.post('http://localhost:8080/createform', {  \r\n          title:this.formTitle,\r\n          Publisher: username,\r\n          Item: this.labelArray,  \r\n          ItemType: this.typeArray,  \r\n          only:this.only,\r\n          roleList:this.roleList,\r\n          ddl:this.ddl\r\n        })  \r\n        .then(response => {  \r\n          //console.log('后端返回数据：', response.data); \r\n          if (response.data.success) { \r\n            this.selectedFields=[{ id: 'field1', label: '字段1', type: 'text' }],\r\n            this.showForm= false,\r\n            this.formTitle='',\r\n            this.only= 0 ,\r\n            this.roleList=[0,0,0],\r\n            this.ddl=\"\",\r\n            router.push('/form-create'); \r\n            alert('表单创建成功！');\r\n          }\r\n          else {  \r\n            //console.log(response.data.message);\r\n            this.errorMessage = response.data.message || '表单创建失败了，请稍后再试';  \r\n            alert(this.errorMessage);\r\n          }\r\n         })  \r\n        .catch(error => {  \r\n          if (error.response) {  \r\n            // 后端返回的错误信息\r\n            //console.log(error.response.data);\r\n            this.errorMessage = error.response.data;   \r\n          }\r\n          else {\r\n            this.errorMessage = '表单创建失败，请稍后再试';\r\n          }\r\n        }); \r\n      },\r\n    }, \r\n  };\r\n  </script>\r\n\r\n<style scoped>\r\n\r\n.remove-btn {  \r\n  margin-left: 160px; /* 左边距 */  \r\n  padding: 3px 10px; /* 内边距 */  \r\n  background-color: #6292ff; /* 蓝色背景 */  \r\n  color: #fff; /* 白色文本 */  \r\n  border: none; /* 无边框 */  \r\n  border-radius: 12px; /* 圆角 */  \r\n  cursor: pointer; /* 鼠标悬停时变为小手图标 */  \r\n  transition: background-color 0.3s ease; /* 背景色过渡效果 */  \r\n  margin-top: 7px;\r\n  font-size: 15px;\r\n  font-family: \"黑体\";\r\n}  \r\n  \r\n/* 填写按钮点击后的样式（可选） */  \r\n.remove-btn:active {  \r\n  background-color: #0056b3; /* 深蓝色背景 */  \r\n}\r\n\r\n.container {  \r\n    display: flex;  \r\n    flex-direction: row;  \r\n  }  \r\n    \r\n  .form-create{  \r\n    max-width: 400px;\r\n    margin: auto;\r\n  }  \r\n\r\n.dynamic-form {\r\n  max-width: 400px;\r\n  margin: auto;\r\n}\r\n\r\n.form-title-input{\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.form-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  margin-top:20px;\r\n}\r\n\r\n.field-input {\r\n  flex: 1;\r\n  margin-right: 10px;\r\n}\r\n\r\n.field-select {\r\n  width: 120px;\r\n}\r\n\r\n.remove-btn {\r\n  margin-left: 10px;\r\n}\r\n\r\n.add-btn,.submit-btn , .generate-btn {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n  \r\n}\r\n\r\n.form {\r\n  margin-top: 20px;\r\n}\r\n\r\n.form-table table {  \r\n  width: 100%; /* 表格宽度 */  \r\n  border-collapse: collapse; /* 合并边框 */  \r\n}  \r\n  \r\n.form-table table tr td {  \r\n  padding: 10px; /* 单元格内边距 */  \r\n  border: 1px solid #ddd; /* 单元格边框 */  \r\n}  \r\n  \r\n.form-table table tr td:first-child {  \r\n  width: 30%; /* 可以调整标签列的宽度 */  \r\n}  \r\n\r\n.form-table table tr td input {  \r\n  width: 100%; /* 输入字段占满单元格宽度 */  \r\n  box-sizing: border-box; /* 包含内边距和边框 */  \r\n}  \r\n.demo-5{\r\n      padding: 10px;\r\n      background: #fff;\r\n      .btn{\r\n        margin-right: 20px;\r\n      }\r\n      .note{\r\n        font-size: 14px;\r\n        padding: 10px 0;\r\n        color: red;\r\n      }\r\n    }\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}