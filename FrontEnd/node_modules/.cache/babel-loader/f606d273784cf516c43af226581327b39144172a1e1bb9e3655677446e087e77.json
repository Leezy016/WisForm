{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport NavBar from './NavBar.vue';\nimport { mapGetters } from 'vuex';\nimport axios from 'axios';\nimport router from '../router';\nimport dayjs from 'dayjs';\nimport datepicker from './datepicker.vue';\nexport default {\n  name: 'FormCreate',\n  components: {\n    NavBar,\n    datepicker\n  },\n  data() {\n    return {\n      selectedFields: [{\n        id: 'field1',\n        label: '字段1',\n        type: 'text'\n      }],\n      showForm: false,\n      formTitle: '',\n      only: 0,\n      // 默认不选中 \n      roleList: [0, 0, 0],\n      ddl: \"\",\n      //2024-06-11\n      minDate: dayjs(new Date()),\n      maxDate: dayjs(new Date()).add(20, 'day')\n    };\n  },\n  computed: {\n    // 计算属性返回label数组  \n    labelArray() {\n      return this.selectedFields.map(field => field.label);\n    },\n    // 计算属性返回type数组  \n    typeArray() {\n      return this.selectedFields.map(field => field.type);\n    },\n    ...mapGetters(['username'])\n  },\n  methods: {\n    picked(year, month, date) {\n      console.warn(`你选择了${year}年${month}月${date}日`);\n    },\n    addField() {\n      const id = `field${this.selectedFields.length + 1}`;\n      this.selectedFields.push({\n        id,\n        label: `字段${this.selectedFields.length + 1}`,\n        type: 'text'\n      });\n    },\n    removeField(index) {\n      this.selectedFields.splice(index, 1);\n    },\n    generateForm() {\n      this.showForm = true;\n      // 生成表单数据对象，用于绑定表单输入\n      this.formData = this.selectedFields.reduce((acc, field) => {\n        acc[field.id] = '';\n        return acc;\n      });\n    },\n    submitForm() {\n      const {\n        username\n      } = this;\n      console.log(this.only);\n      console.log(this.ddl);\n      axios.post('http://localhost:8080/createform', {\n        title: this.formTitle,\n        Publisher: username,\n        Item: this.labelArray,\n        ItemType: this.typeArray,\n        only: this.only,\n        roleList: this.roleList,\n        ddl: this.ddl\n      }).then(response => {\n        //console.log('后端返回数据：', response.data); \n        if (response.data.success) {\n          this.selectedFields = [{\n            id: 'field1',\n            label: '字段1',\n            type: 'text'\n          }], this.showForm = false, this.formTitle = '';\n          router.push('/form-create');\n          alert('表单创建成功！');\n        } else {\n          //console.log(response.data.message);\n          this.errorMessage = response.data.message || '表单创建失败了，请稍后再试';\n          alert(this.errorMessage);\n        }\n      }).catch(error => {\n        if (error.response) {\n          // 后端返回的错误信息\n          //console.log(error.response.data);\n          this.errorMessage = error.response.data;\n        } else {\n          this.errorMessage = '表单创建失败，请稍后再试';\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["NavBar","mapGetters","axios","router","dayjs","datepicker","name","components","data","selectedFields","id","label","type","showForm","formTitle","only","roleList","ddl","minDate","Date","maxDate","add","computed","labelArray","map","field","typeArray","methods","picked","year","month","date","console","warn","addField","length","push","removeField","index","splice","generateForm","formData","reduce","acc","submitForm","username","log","post","title","Publisher","Item","ItemType","then","response","success","alert","errorMessage","message","catch","error"],"sources":["/Users/aoliliaoao/Downloads/WisForm/FrontEnd/src/components/FormCreate.vue"],"sourcesContent":["<template>\r\n  <div> \r\n    <NavBar/> <!-- 引入并使用NavBar组件 --> \r\n  </div>\r\n\r\n  <div class=\"dynamic-form\">  \r\n    <!-- 动态表单标题输入 -->  \r\n    <div class=\"form-title-input\">    \r\n        <label for=\"formTitle\">表单标题：</label>    \r\n        <input type=\"text\" id=\"formTitle\" v-model=\"formTitle\" placeholder=\"请输入表单标题\">  <!-- 绑定到Vue实例的formTitle属性 -->  \r\n    </div>\r\n\r\n    <div>\r\n      <h4>基于Vue.2X的日期选择器</h4>\r\n        <div style=\"width: 502px;\">\r\n          <datepicker v-on:picked=\"picked\"></datePicker>\r\n        </div>\r\n    </div>\r\n\r\n    <div>  \r\n    <label for=\"myCheckbox\">  \r\n      <input type=\"checkbox\" id=\"myCheckbox\" v-model=\"only\" />  \r\n      填表人只能填写自己的信息  \r\n    </label>  \r\n  </div> \r\n\r\n  <div>  \r\n    <p>请选择可以填写表单的用户类型</p>\r\n    <label for=\"myCheckbox\">  \r\n      <input type=\"checkbox\" id=\"myCheckbox\" v-model=\"roleList[0]\" />  \r\n      院长  \r\n    </label> \r\n    <label for=\"myCheckbox\">  \r\n      <input type=\"checkbox\" id=\"myCheckbox\" v-model=\"roleList[1]\" />  \r\n      系主任 \r\n    </label>  \r\n    <label for=\"myCheckbox\">  \r\n      <input type=\"checkbox\" id=\"myCheckbox\" v-model=\"roleList[2]\" />  \r\n      老师 \r\n    </label> \r\n  </div> \r\n  \r\n    <!-- 循环渲染已选择的表单项 -->  \r\n    <div v-for=\"(field, index) in selectedFields\" :key=\"index\" class=\"form-item\">  \r\n        <input type=\"text\" v-model=\"field.label\" placeholder=\"表单项名称\" class=\"field-input\"> <!-- 表单项名称输入框 -->  \r\n        <select v-model=\"field.type\" class=\"field-select\">  \r\n            <option value=\"text\">文本</option> <!-- 表单项类型为文本 -->  \r\n            <option value=\"number\">数字</option> <!-- 表单项类型为数字 -->  \r\n            <!-- 更多的选项 -->  \r\n        </select>  \r\n        <button @click=\"removeField(index)\" class=\"remove-btn\">-</button> <!-- 移除表单项的按钮 -->  \r\n    </div>  \r\n  \r\n    <!-- 添加表单项的按钮 -->  \r\n    <button @click=\"addField\" class=\"add-btn\">添加表单项</button>  \r\n  \r\n    <!-- 确认按钮，用于生成表单 -->  \r\n    <button @click=\"generateForm\" class=\"generate-btn\">确认</button>  \r\n  \r\n    <!-- 根据showForm的值条件渲染表单 -->  \r\n    <form v-if=\"showForm\" @submit.prevent=\"submitForm\" class=\"form-table\">    \r\n        <table>    \r\n            <!-- 循环渲染已选择的表单项为表格形式 -->  \r\n            <tr v-for=\"(field, index) in selectedFields\" :key=\"index\">    \r\n                <td>    \r\n                    <label :for=\"field.id\" class=\"field-label\">{{ field.label }}</label>  <!-- 表单项标签 -->  \r\n                </td>    \r\n                <td>    \r\n                  <p >  </p>\r\n                </td>    \r\n            </tr>    \r\n        </table>    \r\n        <button type=\"submit\" class=\"submit-btn\">提交</button>  <!-- 提交表单的按钮 -->  \r\n    </form>  \r\n  </div>\r\n</template>\r\n\r\n  <script>\r\n  import NavBar from './NavBar.vue'; \r\n  import { mapGetters } from 'vuex';\r\n  import axios from 'axios';\r\n  import router from '../router';\r\n  import dayjs from 'dayjs';\r\n  import datepicker from './datepicker.vue';\r\n  \r\n  export default {\r\n    name: 'FormCreate',\r\n    components: {  \r\n      NavBar,\r\n      datepicker\r\n    } ,\r\n    data() {\r\n      return {\r\n        selectedFields: [{ id: 'field1', label: '字段1', type: 'text' }],\r\n        showForm: false,\r\n        formTitle:'',\r\n        only: 0 ,// 默认不选中 \r\n        roleList:[0,0,0],\r\n        ddl:\"\",//2024-06-11\r\n        minDate: dayjs(new Date()),\r\n        maxDate: dayjs(new Date()).add(20, 'day'),\r\n      };\r\n    }, \r\n    computed: {  \r\n      // 计算属性返回label数组  \r\n      labelArray() {  \r\n        return this.selectedFields.map(field => field.label);  \r\n      },  \r\n      // 计算属性返回type数组  \r\n      typeArray() {  \r\n        return this.selectedFields.map(field => field.type);  \r\n      },\r\n      ...mapGetters([  \r\n        'username'  \r\n      ])     \r\n    },\r\n    methods: {\r\n      picked(year, month, date) {\r\n\t\t\t\tconsole.warn(`你选择了${year}年${month}月${date}日`)\r\n\t\t\t},\r\n      addField() {\r\n        const id = `field${this.selectedFields.length + 1}`;\r\n        this.selectedFields.push({ id, label: `字段${this.selectedFields.length + 1}`, type: 'text' });\r\n      },\r\n      removeField(index) {\r\n        this.selectedFields.splice(index, 1);\r\n      },\r\n      generateForm() {\r\n        this.showForm = true;\r\n        // 生成表单数据对象，用于绑定表单输入\r\n        this.formData = this.selectedFields.reduce((acc, field) => {\r\n          acc[field.id] = '';\r\n          return acc;\r\n        });\r\n      },\r\n      submitForm() {\r\n        const { username } = this; \r\n        console.log(this.only);\r\n        console.log(this.ddl);\r\n        axios.post('http://localhost:8080/createform', {  \r\n          title:this.formTitle,\r\n          Publisher: username,\r\n          Item: this.labelArray,  \r\n          ItemType: this.typeArray,  \r\n          only:this.only,\r\n          roleList:this.roleList,\r\n          ddl:this.ddl\r\n        })  \r\n        .then(response => {  \r\n          //console.log('后端返回数据：', response.data); \r\n          if (response.data.success) { \r\n            this.selectedFields=[{ id: 'field1', label: '字段1', type: 'text' }],\r\n            this.showForm=false,\r\n            this.formTitle='' \r\n            router.push('/form-create'); \r\n            alert('表单创建成功！');\r\n          }\r\n          else {  \r\n            //console.log(response.data.message);\r\n            this.errorMessage = response.data.message || '表单创建失败了，请稍后再试';  \r\n            alert(this.errorMessage);\r\n          }\r\n         })  \r\n        .catch(error => {  \r\n          if (error.response) {  \r\n            // 后端返回的错误信息\r\n            //console.log(error.response.data);\r\n            this.errorMessage = error.response.data;   \r\n          }\r\n          else {\r\n            this.errorMessage = '表单创建失败，请稍后再试';\r\n          }\r\n        }); \r\n      },\r\n    }, \r\n  };\r\n  </script>\r\n\r\n<style scoped>\r\n.dynamic-form {\r\n  max-width: 400px;\r\n  margin: auto;\r\n}\r\n\r\n.form-title-input{\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.form-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  margin-top:20px;\r\n}\r\n\r\n.field-input {\r\n  flex: 1;\r\n  margin-right: 10px;\r\n}\r\n\r\n.field-select {\r\n  width: 120px;\r\n}\r\n\r\n.remove-btn {\r\n  margin-left: 10px;\r\n}\r\n\r\n.add-btn,.submit-btn , .generate-btn {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  margin-bottom: 10px;\r\n  \r\n}\r\n\r\n.form {\r\n  margin-top: 20px;\r\n}\r\n\r\n.form-table table {  \r\n  width: 100%; /* 表格宽度 */  \r\n  border-collapse: collapse; /* 合并边框 */  \r\n}  \r\n  \r\n.form-table table tr td {  \r\n  padding: 10px; /* 单元格内边距 */  \r\n  border: 1px solid #ddd; /* 单元格边框 */  \r\n}  \r\n  \r\n.form-table table tr td:first-child {  \r\n  width: 30%; /* 可以调整标签列的宽度 */  \r\n}  \r\n\r\n.form-table table tr td input {  \r\n  width: 100%; /* 输入字段占满单元格宽度 */  \r\n  box-sizing: border-box; /* 包含内边距和边框 */  \r\n}  \r\n.demo-5{\r\n      padding: 10px;\r\n      background: #fff;\r\n      .btn{\r\n        margin-right: 20px;\r\n      }\r\n      .note{\r\n        font-size: 14px;\r\n        padding: 10px 0;\r\n        color: red;\r\n      }\r\n    }\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}