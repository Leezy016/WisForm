{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelDynamic as _vModelDynamic, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form\"\n};\nconst _hoisted_2 = [\"for\"];\nconst _hoisted_3 = [\"type\", \"id\", \"onUpdate:modelValue\"];\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\",\n  class: \"submit-btn\"\n}, \"提交\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavBar = _resolveComponent(\"NavBar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_NavBar), _createElementVNode(\"p\", null, _toDisplayString($props.title), 1 /* TEXT */), _createCommentVNode(\" 在这里添加其他详情页面的内容 \"), _createElementVNode(\"table\", null, [_createCommentVNode(\" 循环渲染已选择的表单项为表格形式 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedFields, (field, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, [_createElementVNode(\"label\", {\n      for: field.id,\n      class: \"field-label\"\n    }, _toDisplayString(field.label), 9 /* TEXT, PROPS */, _hoisted_2), _createCommentVNode(\" 表单项标签 \")]), _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: field.type,\n      id: field.id,\n      \"onUpdate:modelValue\": $event => _ctx.formData[field.id] = $event,\n      class: \"field-input\"\n    }, null, 8 /* PROPS */, _hoisted_3), [[_vModelDynamic, _ctx.formData[field.id]]]), _createCommentVNode(\" 表单项输入框，类型由field.type决定 \")])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_4, _createCommentVNode(\" 提交表单的按钮 \")]);\n}","map":{"version":3,"names":["class","_createElementVNode","type","_createElementBlock","_hoisted_1","_createVNode","_component_NavBar","_toDisplayString","$props","title","_createCommentVNode","_Fragment","_renderList","_ctx","selectedFields","field","index","key","for","id","label","_hoisted_2","$event","formData","_hoisted_3","_hoisted_4"],"sources":["/Users/aoliliaoao/Downloads/WisForm/FrontEnd/src/components/FormFillDetail.vue"],"sourcesContent":["<template>  \n    <div class=\"form\">  \n      <NavBar/>\n      <p>{{ title }}</p>  \n      <!-- 在这里添加其他详情页面的内容 -->  \n      <table>    \n            <!-- 循环渲染已选择的表单项为表格形式 -->  \n            <tr v-for=\"(field, index) in selectedFields\" :key=\"index\">    \n                <td>    \n                    <label :for=\"field.id\" class=\"field-label\">{{ field.label }}</label>  <!-- 表单项标签 -->  \n                </td>    \n                <td>    \n                    <input :type=\"field.type\" :id=\"field.id\" v-model=\"formData[field.id]\" class=\"field-input\">  <!-- 表单项输入框，类型由field.type决定 -->  \n                </td>    \n            </tr>    \n        </table>    \n        <button type=\"submit\" class=\"submit-btn\">提交</button>  <!-- 提交表单的按钮 -->\n    </div>  \n  </template>  \n    \n  <script>  \n  import NavBar from './NavBar.vue'; \n  import axios from 'axios';\n  export default {  \n    props: ['title'], // 接收从父组件传递过来的 title \n    data() {  \n    return {  \n      item: ['username','password'],\n      itemType:['string','string']\n    };  \n    },  \n    components: {\n          NavBar,\n    },\n    methods:{\n    getItems() {   \n      axios.post('http://localhost:8080/api/register', {\n        title:this.title\n      })  \n      .then(response => {  \n        if (response.data.success) { \n          //console.log('表单内容获取成功'); \n          this.item=response.data.item,\n          this.itemType=response.data.itemType\n        }\n        else {  \n          this.getErrorMessage = response.data.message || '表单内容获取失败，请稍后再试';  \n        }\n      })  \n      .catch(error => {  \n        if (error.response) {  \n          // 后端返回的错误信息\n          this.getErrorMessage = error.response.data;   \n        }\n        else {\n          this.getErrorMessage = '表单内容获取失败，请稍后再试';\n        }\n      });  \n    },   \n    },  \n    created() {  \n      this.getItems(); \n    },\n\n  };  \n  </script>"],"mappings":";;EACSA,KAAK,EAAC;AAAM;mBADrB;mBAAA;gCAgBQC,mBAAA,CAAoD;EAA5CC,IAAI,EAAC,QAAQ;EAACF,KAAK,EAAC;GAAa,IAAE;;;uBAf/CG,mBAAA,CAgBM,OAhBNC,UAgBM,GAfJC,YAAA,CAASC,iBAAA,GACTL,mBAAA,CAAkB,WAAAM,gBAAA,CAAZC,MAAA,CAAAC,KAAK,kBACXC,mBAAA,oBAAuB,EACvBT,mBAAA,CAUU,gBATJS,mBAAA,sBAAyB,G,kBACzBP,mBAAA,CAOKQ,SAAA,QAdjBC,WAAA,CAOyCC,IAAA,CAAAC,cAAc,EAPvD,CAOwBC,KAAK,EAAEC,KAAK;yBAAxBb,mBAAA,CAOK;MAPyCc,GAAG,EAAED;IAAK,IACpDf,mBAAA,CAEK,aADDA,mBAAA,CAAoE;MAA5DiB,GAAG,EAAEH,KAAK,CAACI,EAAE;MAAEnB,KAAK,EAAC;wBAAiBe,KAAK,CAACK,KAAK,wBAT7EC,UAAA,GAS0FX,mBAAA,WAAc,C,GAExFT,mBAAA,CAEK,a,gBADDA,mBAAA,CAA0F;MAAlFC,IAAI,EAAEa,KAAK,CAACb,IAAI;MAAGiB,EAAE,EAAEJ,KAAK,CAACI,EAAE;MAZ3D,uBAAAG,MAAA,IAYsET,IAAA,CAAAU,QAAQ,CAACR,KAAK,CAACI,EAAE,IAAAG,MAAA;MAAGtB,KAAK,EAAC;4BAZhGwB,UAAA,I,iBAYsEX,IAAA,CAAAU,QAAQ,CAACR,KAAK,CAACI,EAAE,G,GAAyBT,mBAAA,4BAA+B,C;oCAIvIe,UAAoD,EAAEf,mBAAA,aAAgB,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}