{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4295d220\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"sidebar\"\n};\nconst _hoisted_2 = [\"href\", \"onClick\"];\nconst _hoisted_3 = {\n  key: 1,\n  class: \"submenu\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"li\", null, \"我填写的\", -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"li\", null, \"我发布的\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"li\", null, \"我可查看\", -1 /* HOISTED */));\nconst _hoisted_7 = [_hoisted_4, _hoisted_5, _hoisted_6];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"nav\", _hoisted_1, [_createElementVNode(\"ul\", null, [_createCommentVNode(\" 使用 v-for 遍历 permissions 并根据权限显示不同的文本 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.permissions, permission => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: permission\n    }, [_createCommentVNode(\" <a v-if=\\\"textMap[permission]\\\" :href=\\\"linkMap[permission]\\\">  \\r\\n          {{ textMap[permission] }}  \\r\\n        </a> \"), $options.textMap[permission] ? (_openBlock(), _createElementBlock(\"a\", {\n      key: 0,\n      href: $options.linkMap[permission],\n      onClick: $event => _ctx.handleClick(permission)\n    }, _toDisplayString($options.textMap[permission]), 9 /* TEXT, PROPS */, _hoisted_2)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 下拉菜单，初始隐藏 \"), _ctx.showSubMenu && permission === 1 ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_3, [..._hoisted_7])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_hoisted_4","_hoisted_5","_hoisted_6","_createElementBlock","_hoisted_1","_createCommentVNode","_Fragment","_renderList","$options","permissions","permission","textMap","href","linkMap","onClick","$event","_ctx","handleClick","_hoisted_2","showSubMenu","_hoisted_3","_hoisted_7"],"sources":["/Users/aoliliaoao/Downloads/WisForm/FrontEnd/src/components/NavBar.vue"],"sourcesContent":["<template>  \r\n  <nav class = \"sidebar\">  \r\n    <ul>  \r\n      <!-- 使用 v-for 遍历 permissions 并根据权限显示不同的文本 -->  \r\n      <li v-for=\"permission in permissions\" :key=\"permission\">  \r\n        <!-- <a v-if=\"textMap[permission]\" :href=\"linkMap[permission]\">  \r\n          {{ textMap[permission] }}  \r\n        </a> -->\r\n\r\n        <a   \r\n          v-if=\"textMap[permission]\"   \r\n          :href=\"linkMap[permission]\"   \r\n          @click=\"handleClick(permission)\"  \r\n        >    \r\n          {{ textMap[permission] }}    \r\n        </a>  \r\n        <!-- 下拉菜单，初始隐藏 -->  \r\n        <ul v-if=\"showSubMenu && permission === 1\" class=\"submenu\">  \r\n          <li>我填写的</li>  \r\n          <li>我发布的</li>  \r\n          <li>我可查看</li>  \r\n        </ul>  \r\n       \r\n\r\n      </li> \r\n    </ul>  \r\n  </nav>  \r\n</template>  \r\n  \r\n<script>  \r\nexport default {  \r\n  name: 'NavBar', \r\n  computed: {  \r\n    // 使用计算属性从 Vuex store 中获取 permissions  \r\n    permissions() {  \r\n      return this.$store.state.permissions;  \r\n    },  \r\n    data() {  \r\n    return {  \r\n      showSubMenu: false, // 控制下拉菜单的显示  \r\n    };  \r\n  },  \r\n  methods: {  \r\n    handleClick(permission) {  \r\n      // 如果点击的是“查看表单”，则切换下拉菜单的显示  \r\n      if (permission === 1) {  \r\n        this.showSubMenu = !this.showSubMenu;  \r\n        // 如果你想阻止链接的默认跳转行为，可以添加 event.preventDefault()  \r\n        // 但在这里，我们假设你不需要阻止它  \r\n      }  \r\n    },  \r\n  },   \r\n    // 可选的 permissionMap 对象，用于将权限ID映射到文本 \r\n    textMap() {  \r\n      return {  \r\n        1: '查看表单',\r\n        2: '创建表单',  \r\n        3: '填写表单',\r\n        4: '管理人员'\r\n      };  \r\n    },\r\n    linkMap() {  \r\n      return {  \r\n        1: '/form-view',\r\n        2: '/form-create',  \r\n        3: '/form-fill',\r\n        4: '/user-management'\r\n      };  \r\n    },    \r\n  },\r\n    \r\n};  \r\n</script>\r\n\r\n<style scoped>  \r\n.sidebar {  \r\n  position: fixed; /* 或者 absolute，取决于你的页面布局需求 */  \r\n  top: 0;  \r\n  left: 0;  \r\n  bottom: 0; /* 如果你想让侧边栏占满整个页面高度 */  \r\n  width: 200px; /* 设置侧边栏宽度 */  \r\n  background-color: #f8f9fa; /* 设置背景颜色 */  \r\n  overflow-y: auto; /* 如果内容太多，允许垂直滚动 */  \r\n  padding-top: 20px; /* 顶部内边距，可选 */  \r\n}  \r\n  \r\n.sidebar ul {  \r\n  list-style-type: none;  \r\n  padding: 0;  \r\n  margin: 0;  \r\n}  \r\n  \r\n.sidebar li {  \r\n  padding: 10px; /* 设置列表项的内边距 */  \r\n  border-bottom: 1px solid #ddd; /* 可选，设置列表项之间的分隔线 */  \r\n}  \r\n  \r\n/* 如果你希望点击侧边栏链接时不产生默认的蓝色背景 */  \r\n.sidebar li a {  \r\n  color: inherit;  \r\n  text-decoration: none;  \r\n}  \r\n  \r\n</style>"],"mappings":";;;EACOA,KAAK,EAAG;AAAS;mBADxB;;EAAAC,GAAA;EAiBmDD,KAAK,EAAC;;gEAC/CE,mBAAA,CAAa,YAAT,MAAI;gEACRA,mBAAA,CAAa,YAAT,MAAI;gEACRA,mBAAA,CAAa,YAAT,MAAI;oBAFRC,UAAa,EACbC,UAAa,EACbC,UAAa,C;;uBAnBrBC,mBAAA,CAyBM,OAzBNC,UAyBM,GAxBJL,mBAAA,CAuBK,aAtBHM,mBAAA,0CAA6C,G,kBAC7CF,mBAAA,CAoBKG,SAAA,QAxBXC,WAAA,CAI+BC,QAAA,CAAAC,WAAW,EAAzBC,UAAU;yBAArBP,mBAAA,CAoBK;MApBkCL,GAAG,EAAEY;IAAU,IACpDL,mBAAA,+HAEQ,EAGAG,QAAA,CAAAG,OAAO,CAACD,UAAU,K,cAD1BP,mBAAA,CAMI;MAfZL,GAAA;MAWWc,IAAI,EAAEJ,QAAA,CAAAK,OAAO,CAACH,UAAU;MACxBI,OAAK,EAAAC,MAAA,IAAEC,IAAA,CAAAC,WAAW,CAACP,UAAU;wBAE3BF,QAAA,CAAAG,OAAO,CAACD,UAAU,yBAd/BQ,UAAA,KAAAb,mBAAA,gBAgBQA,mBAAA,eAAkB,EACRW,IAAA,CAAAG,WAAW,IAAIT,UAAU,U,cAAnCP,mBAAA,CAIK,MAJLiB,UAIK,EArBb,IAAAC,UAAA,MAAAhB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}