{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ce4fd72c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"form-view-detail\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"form-table\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"pageination\"\n};\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavBar = _resolveComponent(\"NavBar\");\n  const _component_lable = _resolveComponent(\"lable\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_NavBar), $data.item ? (_openBlock(), _createElementBlock(\"form\", _hoisted_2, [_createElementVNode(\"table\", null, [_createCommentVNode(\" 循环渲染已选择的表单项为表格形式 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.item, (itemName, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, [_createElementVNode(\"label\", null, _toDisplayString(itemName), 1 /* TEXT */)]), _createElementVNode(\"td\", null, [_createVNode(_component_lable, null, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.content[index]), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), $data.sum ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.pageUp(0)),\n    class: \"pagination_page\"\n  }, \"首页\"), _createElementVNode(\"div\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.pageUp(1)),\n    class: \"pagination_page\"\n  }, \"上一页\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.nums, (i, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"pagination_page\",\n      key: index,\n      onClick: $event => $options.jump(i)\n    }, _toDisplayString(i), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.pageDown(1)),\n    class: \"pagination_page\"\n  }, \"下一页\"), _createElementVNode(\"div\", {\n    onClick: _cache[3] || (_cache[3] = $event => $options.pageDown(0)),\n    class: \"pagination_page pagination_page_right\"\n  }, \"尾页\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","_component_NavBar","$data","item","_hoisted_2","_createElementVNode","_createCommentVNode","_Fragment","_renderList","itemName","index","_toDisplayString","_component_lable","default","_withCtx","_createTextVNode","content","_","sum","_hoisted_3","onClick","_cache","$event","$options","pageUp","nums","i","jump","_hoisted_4","pageDown"],"sources":["/Users/aoliliaoao/Downloads/WisForm/FrontEnd/src/components/FormViewDetail.vue"],"sourcesContent":["<template>\n  <div class=\"form-view-detail\"> \n    <NavBar /> \n    <form v-if=\"item\"  class=\"form-table\">    \n        <table>    \n            <!-- 循环渲染已选择的表单项为表格形式 -->  \n            <tr v-for=\"(itemName, index) in item\" :key=\"index\">    \n                <td>    \n                  <label>{{ itemName }}</label> \n                </td>\n                <td>\n                  <lable>{{ content[index] }}</lable> \n                </td>        \n            </tr>    \n        </table>    \n    </form>  \n\n    <div class=\"pageination\" v-if=\"sum\">\n      <div @click=\"pageUp(0)\" class=\"pagination_page\">首页</div>\n      <div @click=\"pageUp(1)\" class=\"pagination_page\">上一页</div>\n      <div class=\"pagination_page\" \n          v-for=\"(i,index) in nums\" :key=\"index\" @click=\"jump(i)\">\n        {{i}}</div>\n      <div @click=\"pageDown(1)\" class=\"pagination_page\" >下一页</div>\n      <div @click=\"pageDown(0)\" class=\"pagination_page pagination_page_right\" >尾页</div>\n    </div>\n\n  </div>\n</template>\n\n<script>\n\nimport NavBar from './NavBar.vue'; \nimport axios from 'axios';\nexport default {\n  props: ['title'],\n  data() {  \n    return {  \n      sum:[],//id列表\n      nums: [],\n      curNum: 5,//当前页数默认1\n\n      item: ['item1','item2'],\n      content:['1','2'],\n      getcErrorMessage:'',\n      getsErrorMessage:'', \n    };  \n  }, \n  components: {  \n    NavBar,  \n  } ,\n  methods:{\n    pageUp(state){\n      if (this.curNum - 1 != 0 && state == 1) {\n        this.jump(this.curNum - 1);\n      } else {\n        this.jump(1);\n      }\n    },//上一页跟首页 state=1是上一页 state=0是首页\n    pageDown(state){\n      if (this.curNum + 1 != this.sum && state == 1) {\n        this.jump(this.curNum + 1);\n      } else {\n        this.jump(this.sum);\n      }\n    },// state=1是下一页 state=0是尾页\n    jump(num){\n        this.curNum = num;\n        this.pagers();\n        //this.getContent(this.sum[num-1]);\n      },//跳转页码\n    pagers(){\n        //重置\n        this.nums = [];\n        //开始页码1\n        let start = this.curNum - 3 > 1 ? this.curNum - 3 : 1;\n        //当前页码减去开始页码得到差\n        let interval = this.curNum - start;\n        //最多7个页码，总页码减去interval 得到end要显示的数量+\n        let end = (7 - interval) < this.sum.size() ? (7 - interval) : this.sum.size();\n        //最末页码减开始页码小于8\n        if ((end - start) != 6) {\n          //最末页码加上与不足7页的数量，数量不得大于总页数\n          end = end + (6 - (end - start)) < this.sum.size() ? end + (6 - (end - start)) : this.sum;\n          //最末页码加上但是还不够7页，进行开始页码追加，开始页码不得小于1\n          if ((end - start) != 6) {\n            start = (end - 6) > 1 ? (end - 6) : 1;\n          }\n        }\n        for (let i = start; i <= end; i++) {\n          this.nums.push(i);\n        }\n      },//计算分页显示的数字\n  getSum(){\n  axios.post('http://localhost:8080/viewform/getSum', {  \n  formatname:this.title\n  })  \n  .then(response => {  \n    if (response.data.success) {  \n      \n      this.sum=response.data.titles;\n      console.log(this.sum);\n    }\n    else {  \n      this.getsErrorMessage = response.data.message || '表单获取失败，请稍后再试';  \n    }\n   })  \n  .catch(error => {  \n    if (error.response) {  \n      // 后端返回的错误信息\n      this.getsErrorMessage = error.response.data;   \n    }\n    else {\n      this.getsErrorMessage = '表单获取失败，请稍后再试';\n    }\n  }); \n},\ngetContent(id){\n  axios.post('http://localhost:8080/viewform/getContent', {  \n    num:id,\n  })  \n  .then(response => {  \n    if (response.data.success) {  \n      this.item=response.data.Itemlist,\n      this.content=response.data.ValueList\n    }\n    else {  \n      this.getcErrorMessage = response.data.message || '表单获取失败，请稍后再试';  \n    }\n   })  \n  .catch(error => {  \n    if (error.response) {  \n      // 后端返回的错误信息\n      this.getcErrorMessage = error.response.data;   \n    }\n    else {\n      this.getcErrorMessage = '表单获取失败，请稍后再试';\n    }\n  }); \n}\n  },\n  created() {  \n    this.getSum();\n    //this.getContent(0); \n    this.pagers();\n  }, \n};\n</script>\n\n<style scoped>\n.form-view-detail{  \nmax-width: 400px;\nmargin: auto;\n}\n.pageination {\n  margin-top: 20px;\n  color: #48576a;\n  font-size: 12px;\n  display: inline-block;\n  user-select: none;\n}\n\n.pagination_page {\n  padding: 0 4px;\n  border: 1px solid #d1dbe5;\n  border-right: 0;\n  background: #fff;\n  font-size: 13px;\n  min-width: 28px;\n  height: 28px;\n  line-height: 28px;\n  cursor: pointer;\n  box-sizing: border-box;\n  text-align: center;\n  float: left;\n}\n\n.pagination_page_right {\n  border-right: 1px solid #d1dbe5;\n}\n\n.form-table table {  \n  width: 100%; /* 表格宽度 */  \n  border-collapse: collapse; /* 合并边框 */  \n}  \n  \n.form-table table tr td {  \n  padding: 10px; /* 单元格内边距 */  \n  border: 1px solid #ddd; /* 单元格边框 */  \n}  \n  \n.form-table table tr td:first-child {  \n  width: 30%; /* 可以调整标签列的宽度 */  \n}  \n\n.form-table table tr td input {  \n  width: 100%; /* 输入字段占满单元格宽度 */  \n  box-sizing: border-box; /* 包含内边距和边框 */  \n}  \n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAkB;;EAD/BC,GAAA;EAGuBD,KAAK,EAAC;;;EAH7BC,GAAA;EAiBSD,KAAK,EAAC;;mBAjBf;;;;uBACEE,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBJC,YAAA,CAAUC,iBAAA,GACEC,KAAA,CAAAC,IAAI,I,cAAhBL,mBAAA,CAYO,QAZPM,UAYO,GAXHC,mBAAA,CAUQ,gBATJC,mBAAA,sBAAyB,G,kBACzBR,mBAAA,CAOKS,SAAA,QAbjBC,WAAA,CAM4CN,KAAA,CAAAC,IAAI,EANhD,CAMwBM,QAAQ,EAAEC,KAAK;yBAA3BZ,mBAAA,CAOK;MAPkCD,GAAG,EAAEa;IAAK,IAC7CL,mBAAA,CAEK,aADHA,mBAAA,CAA6B,eAAAM,gBAAA,CAAnBF,QAAQ,iB,GAEpBJ,mBAAA,CAEK,aADHL,YAAA,CAAmCY,gBAAA;MAXrDC,OAAA,EAAAC,QAAA,CAWyB,MAAoB,CAX7CC,gBAAA,CAAAJ,gBAAA,CAW4BT,KAAA,CAAAc,OAAO,CAACN,KAAK,kB;MAXzCO,CAAA;;wCAAAX,mBAAA,gBAiBmCJ,KAAA,CAAAgB,GAAG,I,cAAlCpB,mBAAA,CAQM,OARNqB,UAQM,GAPJd,mBAAA,CAAwD;IAAlDe,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,MAAM;IAAK5B,KAAK,EAAC;KAAkB,IAAE,GAClDS,mBAAA,CAAyD;IAAnDe,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,MAAM;IAAK5B,KAAK,EAAC;KAAkB,KAAG,I,kBACnDE,mBAAA,CAEaS,SAAA,QAtBnBC,WAAA,CAqB8BN,KAAA,CAAAuB,IAAI,EArBlC,CAqBkBC,CAAC,EAAChB,KAAK;yBADnBZ,mBAAA,CAEa;MAFRF,KAAK,EAAC,iBAAiB;MACGC,GAAG,EAAEa,KAAK;MAAGU,OAAK,EAAAE,MAAA,IAAEC,QAAA,CAAAI,IAAI,CAACD,CAAC;wBACrDA,CAAC,wBAtBXE,UAAA;kCAuBMvB,mBAAA,CAA4D;IAAtDe,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAM,QAAQ;IAAKjC,KAAK,EAAC;KAAmB,KAAG,GACtDS,mBAAA,CAAiF;IAA3Ee,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAM,QAAQ;IAAKjC,KAAK,EAAC;KAAyC,IAAE,E,KAxBjFU,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}